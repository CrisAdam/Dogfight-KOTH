package Planes;

//A helper class for working with directions. 
public class Direction {
	// Returns true if a direction is valid.
	public static boolean isValid(String direction)
	{
		if (direction.length() == 3) {
			return (direction.charAt(0) == 'N' || direction.charAt(0) == 'S') &&
					(direction.charAt(1) == 'W' || direction.charAt(1) == 'E') &&
					(direction.charAt(2) == 'D' || direction.charAt(2) == 'U');
					
		} else if (direction.length() == 2) {
			return ((direction.charAt(0) == 'N' || direction.charAt(0) == 'S') &&
						(direction.charAt(1) == 'W' || direction.charAt(1) == 'E' || direction.charAt(1) == 'D' || direction.charAt(1) == 'U')) ||
					((direction.charAt(0) == 'W' || direction.charAt(0) == 'E') && (direction.charAt(1) == 'D' || direction.charAt(1) == 'U')); 
		} else {
			return direction.charAt(0) == 'N' || direction.charAt(0) == 'S' ||
					direction.charAt(0) == 'W' || direction.charAt(0) == 'E' ||
					direction.charAt(0) == 'D' || direction.charAt(0) == 'U'; 
		}
	}
	// Converts a direction into an array of chars representing the primary directions it consists of.
	public static char[] getPrimaryDirections(String direction) {
		if (direction.length() == 3) {
			char[] primaryDirections = {direction.charAt(0), direction.charAt(1), direction.charAt(2)};
			return primaryDirections;
		} else if (direction.length() == 2) {
			char[] primaryDirections = {direction.charAt(0), direction.charAt(1)};
			return primaryDirections;
		} else {
			char[] primaryDirections = {direction.charAt(0)};
			return primaryDirections;
		}
	     
	}
	 
	// Converts an array of up to 3 chars representing a  direction into a valid direction.
	// Not done yet.
	public static String getDirection(char[] primaryDirections) {
		return null;
	     
	}
	 
	// Returns all possible turning directions given an initial direction.
	// Not done Yet.
	public static String[] getPossibleDirectionsFromDirection(String direction) {
	    if (direction.length() == 3) {
	        String[] directions = {direction,   // the direction itself
								                
								    Character.toString(direction.charAt(0)),	// diagonally connected directions 
								    Character.toString(direction.charAt(1)), 
								    Character.toString(direction.charAt(2)),
								                
								    Character.toString(direction.charAt(0)) + Character.toString(direction.charAt(1)),	// directly connected directions
								    Character.toString(direction.charAt(0)) + Character.toString(direction.charAt(2)),
								    Character.toString(direction.charAt(1)) + Character.toString(direction.charAt(2))}; 
	    	return directions;
	                 
	    } else if (direction.length() == 2) {
	         
	    } else if ( direction. length () == 1) {
	         
	    }
	    return null;       
	}  
}
